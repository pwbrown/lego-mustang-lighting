#include "MqttClient.h"
#include <Secrets.h>

MqttClient::MqttClient(const char *clientName)
    : clientName{(char *)clientName} {}

MqttClient &MqttClient::setup() {
  // Ensure WiFi is running in station mode
  WiFi.mode(WIFI_STA);
  // Begin the WiFi connection using secrets values
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  // Setup MQTT Server
  mqttClient.setServer(MQTT_HOST, MQTT_PORT);
  mqttClient.setClientId(clientName);

  return *this;
}

MqttClient &MqttClient::setKeepAliveInterval(int interval) {
  keepAliveInterval = Interval(interval);
  return *this;
}

MqttClient &MqttClient::onConnecting(CONNECTING_CALLBACK_SIGNATURE cb) {
  connectingCallback = cb;
  return *this;
}

MqttClient &MqttClient::onConnected(CONNECTED_CALLBACK_SIGNATURE cb) {
  connectedCallback = cb;
  return *this;
}

void MqttClient::keepAlive(unsigned int now) {
  bool justDisconnected = false;
  // Check for connection status on an interval
  if (keepAliveInterval.check(now)) {
    bool wifiOk = WiFi.status() == WL_CONNECTED;
    bool mqttOk = mqttClient.connected();
    // Check on WiFi status first (MQTT depends on it)
    if (wifiOk && mqttOk) {
      // Handle reconnect event
      if (connecting) {
        connecting = false;
        Serial.println("Connection Established");
        Serial.print("Local IP: ");
        Serial.println(WiFi.localIP());
        // Call connect callback if available
        if (connectedCallback != NULL) {
          connectedCallback(now);
        }
      }
    } else {
      // Handle first connect event after connection drops
      if (!connecting || firstCheck) {
        connecting = true;
        justDisconnected = true;
        Serial.println("WiFi Disconnected");
        Serial.println("Attempting to Connect...");
      }
      if (!wifiOk) {
        WiFi.reconnect();
      } else {
        mqttClient.connect();
      }
    }
    firstCheck = false;
  }
  // Call connecting callback
  if (connecting && connectingCallback != NULL) {
    connectingCallback(now, justDisconnected);
  }
}

bool MqttClient::loop(unsigned int now) {
  keepAlive(now);
  return !connecting;
}